from wifi_fortress.core.plugin_loader import Plugin
import scapy.all as scapy
from threading import Thread
import time
from typing import Dict, List, Set
import json
import os
from datetime import datetime
import requests
import hashlib
import re

class VulnerabilityScanner(Plugin):
    name = 'Vulnerability Scanner'
    description = 'Scans network for common vulnerabilities'
    version = '1.0.0'
    author = 'WiFi Fortress Team'
    
    def __init__(self):
        super().__init__()
        self.scanner_thread = None
        self.vulnerabilities: List[Dict] = []
        self.known_devices: Set[str] = set()
        self.scan_interval = 300  # 5 minutes
        self.vuln_db_file = 'vulnerability_db.json'
        self.last_scan_time = 0
        
    def initialize(self) -> bool:
        """Initialize the vulnerability scanner"""
        try:
            # Load vulnerability database
            if os.path.exists(self.vuln_db_file):
                with open(self.vuln_db_file, 'r') as f:
                    self.vuln_db = json.load(f)
            else:
                # Create initial vulnerability database
                self.vuln_db = {
                    'known_vulnerabilities': {
                        'default_credentials': [
                            {'vendor': 'Generic', 'username': 'admin', 'password': 'admin'},
                            {'vendor': 'Generic', 'username': 'admin', 'password': 'password'},
                        ],
                        'open_ports': [
                            {'port': 23, 'service': 'telnet', 'risk': 'high'},
                            {'port': 80, 'service': 'http', 'risk': 'medium'},
                            {'port': 443, 'service': 'https', 'risk': 'low'},
                        ]
                    }
                }
                self.save_vuln_db()
            return True
        except Exception as e:
            print(f"Failed to initialize vulnerability scanner: {str(e)}")
            return False
    
    def start_scanning(self):
        """Start vulnerability scanning"""
        if not self.enabled:
            return
            
        def scan_worker():
            while self.enabled:
                try:
                    current_time = time.time()
                    if current_time - self.last_scan_time >= self.scan_interval:
                        self.perform_vulnerability_scan()
                        self.last_scan_time = current_time
                    time.sleep(60)  # Check every minute
                except Exception as e:
                    print(f"Error in vulnerability scan: {str(e)}")
                    time.sleep(300)  # Wait 5 minutes on error
                    
        self.scanner_thread = Thread(target=scan_worker)
        self.scanner_thread.daemon = True
        self.scanner_thread.start()
    
    def perform_vulnerability_scan(self):
        """Perform comprehensive vulnerability scan"""
        # Discover active devices
        network = "192.168.1.0/24"  # Default network, should be configurable
        active_devices = self.discover_devices(network)
        
        for ip in active_devices:
            try:
                # Skip if device was recently scanned
                if ip in self.known_devices:
                    continue
                    
                # Basic port scan
                open_ports = self.scan_ports(ip)
                
                # Check for default credentials
                default_cred_vulns = self.check_default_credentials(ip, open_ports)
                
                # Check for known vulnerabilities
                known_vulns = self.check_known_vulnerabilities(ip, open_ports)
                
                # Combine results
                if open_ports or default_cred_vulns or known_vulns:
                    vulnerability = {
                        'ip': ip,
                        'timestamp': datetime.now().isoformat(),
                        'open_ports': open_ports,
                        'default_credentials': default_cred_vulns,
                        'known_vulnerabilities': known_vulns
                    }
                    self.vulnerabilities.append(vulnerability)
                    self.log_vulnerability(vulnerability)
                
                self.known_devices.add(ip)
                
            except Exception as e:
                print(f"Error scanning {ip}: {str(e)}")
    
    def discover_devices(self, network: str) -> Set[str]:
        """Discover active devices on the network"""
        active_ips = set()
        try:
            # Create ARP request packet
            arp = scapy.ARP(pdst=network)
            ether = scapy.Ether(dst="ff:ff:ff:ff:ff:ff")
            packet = ether/arp
            
            # Send packet and get responses
            result = scapy.srp(packet, timeout=3, verbose=0)[0]
            
            # Process responses
            for sent, received in result:
                active_ips.add(received.psrc)
                
        except Exception as e:
            print(f"Error discovering devices: {str(e)}")
            
        return active_ips
    
    def scan_ports(self, ip: str) -> List[Dict]:
        """Scan for open ports on target IP"""
        open_ports = []
        common_ports = [21, 22, 23, 25, 53, 80, 443, 445, 3389]
        
        for port in common_ports:
            try:
                # Create SYN packet
                syn_packet = scapy.IP(dst=ip)/scapy.TCP(dport=port, flags="S")
                response = scapy.sr1(syn_packet, timeout=1, verbose=0)
                
                if response and response.haslayer(scapy.TCP):
                    if response[scapy.TCP].flags == 0x12:  # SYN-ACK
                        # Send RST to close connection
                        rst_packet = scapy.IP(dst=ip)/scapy.TCP(
                            dport=port,
                            flags="R"
                        )
                        scapy.send(rst_packet, verbose=0)
                        
                        # Record open port
                        open_ports.append({
                            'port': port,
                            'service': self.identify_service(port),
                            'risk': self.assess_risk(port)
                        })
                        
            except Exception as e:
                print(f"Error scanning port {port} on {ip}: {str(e)}")
                
        return open_ports
    
    def check_default_credentials(self, ip: str, open_ports: List[Dict]) -> List[Dict]:
        """Check for default credentials on open ports"""
        vulnerabilities = []
        
        for port_info in open_ports:
            port = port_info['port']
            service = port_info['service']
            
            if service in ['http', 'https']:
                try:
                    # Try common web login paths
                    paths = ['/login', '/admin', '/wp-admin']
                    protocol = 'https' if port == 443 else 'http'
                    
                    for path in paths:
                        url = f"{protocol}://{ip}:{port}{path}"
                        response = requests.get(url, timeout=3, verify=False)
                        
                        if response.status_code == 200:
                            # Check for default credentials
                            for cred in self.vuln_db['known_vulnerabilities']['default_credentials']:
                                if self.test_default_credential(url, cred):
                                    vulnerabilities.append({
                                        'type': 'default_credential',
                                        'service': service,
                                        'port': port,
                                        'path': path,
                                        'credentials': cred
                                    })
                                    
                except Exception as e:
                    print(f"Error checking credentials on {ip}:{port}: {str(e)}")
                    
        return vulnerabilities
    
    def check_known_vulnerabilities(self, ip: str, open_ports: List[Dict]) -> List[Dict]:
        """Check for known vulnerabilities"""
        vulnerabilities = []
        
        for port_info in open_ports:
            port = port_info['port']
            service = port_info['service']
            
            # Check for known vulnerable services
            if service == 'telnet':
                vulnerabilities.append({
                    'type': 'insecure_protocol',
                    'service': service,
                    'port': port,
                    'description': 'Telnet is an insecure protocol that transmits data in cleartext'
                })
            
            elif service == 'http' and port_info['risk'] == 'high':
                try:
                    # Check for common web vulnerabilities
                    protocol = 'https' if port == 443 else 'http'
                    url = f"{protocol}://{ip}:{port}"
                    
                    response = requests.get(url, timeout=3, verify=False)
                    headers = response.headers
                    
                    # Check security headers
                    if 'X-Frame-Options' not in headers:
                        vulnerabilities.append({
                            'type': 'missing_security_header',
                            'service': service,
                            'port': port,
                            'header': 'X-Frame-Options',
                            'risk': 'medium'
                        })
                        
                    if 'Strict-Transport-Security' not in headers and port == 443:
                        vulnerabilities.append({
                            'type': 'missing_security_header',
                            'service': service,
                            'port': port,
                            'header': 'HSTS',
                            'risk': 'medium'
                        })
                        
                except Exception as e:
                    print(f"Error checking web vulnerabilities on {ip}:{port}: {str(e)}")
                    
        return vulnerabilities
    
    def identify_service(self, port: int) -> str:
        """Identify service based on port number"""
        common_services = {
            21: 'ftp',
            22: 'ssh',
            23: 'telnet',
            25: 'smtp',
            53: 'dns',
            80: 'http',
            443: 'https',
            445: 'smb',
            3389: 'rdp'
        }
        return common_services.get(port, 'unknown')
    
    def assess_risk(self, port: int) -> str:
        """Assess risk level of an open port"""
        high_risk_ports = [23, 445]  # telnet, smb
        medium_risk_ports = [21, 80]  # ftp, http
        
        if port in high_risk_ports:
            return 'high'
        elif port in medium_risk_ports:
            return 'medium'
        return 'low'
    
    def test_default_credential(self, url: str, cred: Dict) -> bool:
        """Test if default credentials work"""
        try:
            response = requests.post(
                url,
                data={
                    'username': cred['username'],
                    'password': cred['password']
                },
                timeout=3,
                verify=False
            )
            
            # Check if login was successful (this is a basic check)
            return 'login' not in response.url.lower() and response.status_code == 200
            
        except Exception:
            return False
    
    def log_vulnerability(self, vulnerability: Dict):
        """Log discovered vulnerability"""
        try:
            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            log_entry = {
                'timestamp': timestamp,
                'ip': vulnerability['ip'],
                'vulnerabilities': []
            }
            
            # Process open ports
            for port in vulnerability.get('open_ports', []):
                if port['risk'] == 'high':
                    log_entry['vulnerabilities'].append(
                        f"High-risk port {port['port']} ({port['service']}) is open"
                    )
            
            # Process default credentials
            for cred in vulnerability.get('default_credentials', []):
                log_entry['vulnerabilities'].append(
                    f"Default credentials found on {cred['service']} ({cred['port']})"
                )
            
            # Process known vulnerabilities
            for vuln in vulnerability.get('known_vulnerabilities', []):
                log_entry['vulnerabilities'].append(
                    f"{vuln['type']} found on {vuln['service']} ({vuln['port']})"
                )
            
            # Save to log file
            with open('vulnerability_log.json', 'a') as f:
                json.dump(log_entry, f)
                f.write('\n')
                
            print(f"Vulnerabilities found on {vulnerability['ip']}")
            
        except Exception as e:
            print(f"Error logging vulnerability: {str(e)}")
    
    def save_vuln_db(self):
        """Save vulnerability database"""
        try:
            with open(self.vuln_db_file, 'w') as f:
                json.dump(self.vuln_db, f, indent=2)
        except Exception as e:
            print(f"Error saving vulnerability database: {str(e)}")
    
    def cleanup(self) -> bool:
        """Stop scanning and cleanup"""
        self.enabled = False
        if self.scanner_thread:
            self.scanner_thread.join(timeout=2)
        self.save_vuln_db()
        return True
